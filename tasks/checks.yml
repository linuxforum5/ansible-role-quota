---
- name: Check the quota status
  block:

    - name: Set a fact for the Linux kernel version
      ansible.builtin.set_fact:
        quota_linux_kernel: "{{ ansible_kernel | regex_replace('-.*$') }}"

    - name: Check that the OS is Debian Stretch or above running Linux 2.6.28 or above
      ansible.builtin.assert:
        that:
          - ansible_distribution_file_variety == "Debian"
          - ansible_distribution_major_version is version('9', '>=')
          - quota_linux_kernel is version('2.6.28', '>')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Ensure that required variables are set
      ansible.builtin.assert:
        that:
          - (quota is defined) and (quota | type_debug == "bool")
          - (quota_dir is defined) and (quota_dir is regex('^\/[a-zA-Z0-9\/]{1,99}$'))
          - (quota_name is defined) and (quota_name is regex('[a-zA-Z0-9_-]{1,99}$'))
          - (quota_warn is defined) and (quota_warn | type_debug == "bool")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Ensure that quota warn variables are set
      ansible.builtin.assert:
        that:
          - (quota_warn_from is defined)
          - (quota_warn_subject is defined)
          - (quota_warn_cc is defined)
          - (quota_warn_support is defined)
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: quota_warn is defined

    - name: Check if a aquota.user file is present
      ansible.builtin.stat:
        path: "{{ quota_dir }}/aquota.user"
      register: quota_aquota_users_file

    - name: Debug aquota.user file check
      ansible.builtin.debug:
        var: quota_aquota_users_file
        verbosity: 2

    - name: Set grace variables
      block:

        - name: "Set a variable for the grace array for {{ quota_dir }}"
          ansible.builtin.set_fact:
            quota_grace_array: "{{ ansible_local['quotatool_' ~ quota_name] }}"

        - name: "Debug grace quota array for {{ quota_dir }}"
          ansible.builtin.debug:
            var: quota_grace_array
            verbosity: 2

        - name: "Set variables for existing block and inode grace time in seconds for {{ quota_dir }}"
          ansible.builtin.set_fact:
            quota_existing_grace_block: "{{ quota_grace_array.block_grace | int }}"
            quota_existing_grace_inode: "{{ quota_grace_array.inode_grace | int }}"
          when: quota_grace_array.state == "present"

        - name: "Existing block grace time in seconds for {{ quota_dir }}"
          ansible.builtin.debug:
            var: quota_existing_grace_block
            verbosity: 2
          when: quota_existing_grace_block is defined

        - name: "Existing inode grace time in seconds for {{ quota_dir }}"
          ansible.builtin.debug:
            var: quota_existing_grace_inode
            verbosity: 2
          when: quota_existing_grace_inode is defined

        - name: Ensure that block and inode grace times consist of numbers when defined
          ansible.builtin.assert:
            that:
              - quota_existing_grace_block is regex('^[0-9]+$')
              - quota_existing_grace_inode is regex('^[0-9]+$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: (quota_existing_grace_block is defined) and (quota_existing_grace_inode is defined)

      when: ansible_local['quotatool_' ~ quota_name].state == "present"

    - name: Debug the mounts
      ansible.builtin.debug:
        var: ansible_facts.mounts
        verbosity: 2

    - name: Set a fact for the mounts
      ansible.builtin.set_fact:
        quota_mounts: "{{ ansible_facts.mounts }}"

    - name: "Set device and mount options variables for {{ quota_dir }}"
      ansible.builtin.set_fact:
        # See vars/main.yml for quota_device_query
        quota_device: "{{ quota_mounts | community.general.json_query(quota_device_query) }}"
        # See vars/main.yml for quota_device_options_query
        quota_device_options: "{{ quota_mounts | community.general.json_query(quota_device_options_query) | split(',') | list }}"
        # See vars/main.yml for quota_device_fstype_query
        quota_device_fstype: "{{ quota_mounts | community.general.json_query(quota_device_fstype_query) }}"

    - name: Debug the quota device
      ansible.builtin.debug:
        var: quota_device
        verbosity: 2

    - name: Only ext2, ext3 and ext4 filesystems are supported
      ansible.builtin.assert:
        that:
          - quota_device_fstype is regex('^ext[2|3|4]$')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Debug quota device options
      ansible.builtin.debug:
        var: quota_device_options
        verbosity: 2

    - name: "Ensure that the device and device options for {{ quota_dir }} are not empty"
      ansible.builtin.assert:
        that:
          - quota_device | length > 0
          - quota_device_options | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg:
          - "It appears that {{ quota_dir }} is not a seperate disk, it needs to be one for quotas to be configured"
          - "you can manually check the device and device options using the following command"
          - "findmnt -fno SOURCE,OPTIONS --target {{ quota_dir }}"

    - name: "Debug {{ quota_device }} tune2fs listing"
      ansible.builtin.debug:
        var: ansible_local['tune2fs_' ~ quota_name]
        verbosity: 2

    - name: Set a fact for the device features
      ansible.builtin.set_fact:
        # See vars/main.yml for quota_device_features_query
        quota_device_features: "{{ ansible_local['tune2fs_' ~ quota_name] | dict2items | community.general.json_query(quota_device_features_query) | split(' ') | list }}"

    - name: "Debug {{ quota_device }} mount features array"
      ansible.builtin.debug:
        var: quota_device_features
        verbosity: 2

    - name: "Check if usrjquota=aquota.user is present for {{ quota_device }}"
      ansible.builtin.set_fact:
        quota_type_aquota: true
      when: ("usrjquota=aquota.user" in quota_device_options)

    - name: "Check if quota is present for {{ quota_device }}"
      ansible.builtin.set_fact:
        quota_type_journald: true
      when: ("quota" in quota_device_features)

    - name: "Set a fact for the quota type for {{ quota_device }}"
      ansible.builtin.set_fact:
        quota_type: "{% if quota_type_aquota is defined and quota_type_aquota | bool %}aquota{% elif quota_type_journald is defined and quota_type_journald | bool %}journald{% endif %}"
      when: >-
         (quota_type_aquota is defined and quota_type_aquota | bool) or
         (quota_type_journald is defined and quota_type_journald | bool)

    - name: "Debug the quota_type when defined"
      ansible.builtin.debug:
        var: quota_type
        verbosity: 2
      when: quota_type is defined

    - name: "Ensure that quota_type is valid if defined for {{ quota_dir }}"
      ansible.builtin.assert:
        that:
          - (quota_type == "aquota") or (quota_type == "journald")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: quota_type is defined

    - name: "Check {{ quota_dir }} using quotaon"
      ansible.builtin.command: "quotaon -pu {{ quota_dir }}"
      check_mode: false
      changed_when: false
      register: quota_quotaon
      failed_when: quota_quotaon.rc is not regex('0|1')

    - name: "Debug the output from quotaon -pu {{ quota_dir }}"
      ansible.builtin.debug:
        var: quota_quotaon.stdout
        verbosity: 2

    - name: "Set quota_enabled variable for {{ quota_dir }}"
      ansible.builtin.set_fact:
        quota_enabled: "{% if quota_quotaon.stdout is regex('is on$') %}true{% else %}false{% endif %}"

    - name: "Ensure that quota_enabled is defined and a booolean for {{ quota_dir }}"
      ansible.builtin.assert:
        that:
          - (quota_enabled is defined)
          - (quota_enabled | type_debug == "bool")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: "Debug check results for {{ quota_dir }}"
      ansible.builtin.debug:
        msg:
          - "{{ quota_quotaon.stdout }} using {{ quota_type }}"
        verbosity: 1
      when: quota_type is defined

    - name: "Debug check results for {{ quota_dir }}"
      ansible.builtin.debug:
        msg:
          - "{{ quota_quotaon.stdout }}"
        verbosity: 1
      when: quota_type is not defined

  tags:
    - quota
    - quota_check
...
