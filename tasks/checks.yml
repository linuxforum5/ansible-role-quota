---
- name: Check the quota status
  block:

    - name: Check that the OS is Debian Stretch or above
      ansible.builtin.assert:
        that:
          - ansible_distribution_file_variety == "Debian"
          - ansible_distribution_major_version is version('9', '>=')

    - name: Ensure that required variables are set
      ansible.builtin.assert:
        that:
          - ( quota is defined ) and ( quota | type_debug == "bool" )
          - ( quota_dir is defined ) and ( quota_dir is regex('^\/[a-zA-Z0-9\/]{1,99}$') )
          - ( quota_name is defined )
          - ( quota_warn is defined ) and ( quota_warn | type_debug == "bool" )

    - name: Ensure that quota warn variables are set
      ansible.builtin.assert:
        that:
          - ( quota_warn_from is defined )
          - ( quota_warn_subject is defined )
          - ( quota_warn_cc is defined )
          - ( quota_warn_support is defined )
      when: quota_warn is defined

    - name: Set empty variables for the quota type, device, device options and device features
      ansible.builtin.set_fact:
          quota_type: ""
          quota_device: ""
          quota_device_options: []
          quota_device_features: []

    - name: "Loop through the Ansible mount facts to set device and mount options variables for {{ quota_dir }}"
      ansible.builtin.set_fact:
        quota_device: "{{ mnt.device }}"
        quota_device_options: "{{ (mnt.options).split(',') | list }}"
      when: mnt.mount == quota_dir
      loop: "{{ ansible_facts.mounts }}"
      loop_control:
        loop_var: mnt
        label: "{{ mnt.mount }}"

    - name: "Ensure that the device and device options for {{ quota_dir }} are not empty"
      ansible.builtin.assert:
        that:
          - quota_device | length > 0
          - quota_device_options | length > 0
        fail_msg:
          - "It appears that {{ quota_dir }} is not a seperate disk, it needs to be one for quotas to be configured"
          - "you can manually check the device and device options using the following command"
          - "findmnt -fno SOURCE,OPTIONS --target {{ quota_dir }}"

    - name: "Debug quota {{ quota_dir }} device"
      ansible.builtin.debug:
        var: quota_device
        verbosity: 2

    - name: "Debug {{ quota_device }} mount options array"
      ansible.builtin.debug:
        var: quota_device_options
        verbosity: 2

    - name: "Check the current values of the parameters that can be set by tune2fs for {{ quota_device }}"
      ansible.builtin.command: "tune2fs -l {{ quota_device }}"
      check_mode: false
      changed_when: false
      register: quota_tune2fs

    - name: "Loop through the filesystem features for {{ quota_device }} to set a variable containing an array of features"
      ansible.builtin.set_fact:
        quota_device_features: "{{ (line | regex_replace('^Filesystem features:\\s*')).split(' ') | list }}"
      when: line is regex('^Filesystem features:')
      loop: "{{ quota_tune2fs.stdout_lines }}"
      loop_control:
        loop_var: line

    - name: "Debug {{ quota_device }} mount options array"
      ansible.builtin.debug:
        var: quota_device_features
        verbosity: 2

    - name: "Loop through the {{ quota_device }} mount options to check if usrjquota=aquota.user is present"
      ansible.builtin.set_fact:
        quota_type_aquota: true
      when: opt == "usrjquota=aquota.user"
      loop: "{{ quota_device_options }}"
      loop_control:
        extended: true
        loop_var: opt
        label: "option {{ ansible_loop.index }}"

    - name: "Loop through the {{ quota_device }} features to check if quota is present"
      ansible.builtin.set_fact:
        quota_type_journald: true
      when: feat == "quota"
      loop: "{{ quota_device_features }}"
      loop_control:
        extended: true
        loop_var: feat
        label: "feature {{ ansible_loop.index }}"

    - name: "Set a fact for the quota type for {{ quota_device }}"
      ansible.builtin.set_fact:
        quota_type: "{% if quota_type_aquota %}aquota{% elif quota_type_journald %}journald{% endif %}"
      when: >
         ( ( quota_type_aquota is defined ) and ( quota_type_aquota ) or
         ( quota_type_journald is defined ) and ( quota_type_journald ) )

    - name: "Debug the quota_type when defined"
      ansible.builtin.debug:
        var: quota_type
        verbosity: 2
      when: quota_type is defined

    - name: "Check {{ quota_dir }} using quotaon"
      ansible.builtin.command: "quotaon -pu {{ quota_dir }}"
      check_mode: false
      changed_when: false
      register: quota_quotaon
      failed_when: quota_quotaon.rc is not regex('0|1')

    - name: "Debug the output from quotaon -pu {{ quota_dir }}"
      ansible.builtin.debug:
        var: quota_quotaon.stdout
        verbosity: 2

    - name: "Set quota_enabled variable for {{ quota_dir }}"
      ansible.builtin.set_fact:
        quota_enabled: "{% if quota_quotaon.stdout is regex('is on$') %}true{% else %}false{% endif %}" 

    - name: "Ensure that quota_type is valid if defined for {{ quota_dir }}"
      ansible.builtin.assert:
        that:
          - ( quota_type == "aquota" ) or ( quota_type == "journald" )
      when: quota_type is defined

    - name: "Ensure that quota_enabled is defined and a booolean for {{ quota_dir }}"
      ansible.builtin.assert:
        that:
          - ( quota_enabled is defined ) and ( quota_enabled | type_debug == "bool" )

    - name: "Debug check results for {{ quota_dir }}"
      ansible.builtin.debug:
        msg:
          - "{{ quota_quotaon.stdout }} using {{ quota_type }}"
      when: quota_type is defined

    - name: "Debug check results for {{ quota_dir }}"
      ansible.builtin.debug:
        msg:
          - "{{ quota_quotaon.stdout }}"
      when: quota_type is not defined

  tags:
    - quota
...
