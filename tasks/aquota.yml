---
- name: Enable and configue quotas using aquota
  block:

    - name: "{{ quota_device }}:{{ quota_name }} present in /etc/quotatab"
      ansible.builtin.lineinfile:
        dest: /etc/quotatab
        line: "{{ quota_device }}:{{ quota_name }}"
        state: present
      notify: Restart quota

    - name: "Touch {{ quota_dir }}/aquota.user"
      ansible.builtin.file:
        path: "{{ quota_dir }}/aquota.user"
        state: touch
        access_time: preserve
        modification_time: preserve
        owner: root
        group: root
        mode: 0600
      notify: Restart quota

    - name: Quota enabled and running
      ansible.builtin.service:
        name: quota
        state: started

    - name: "Run quotaon {{ quota_dir }}"
      ansible.builtin.command: "quotaon {{ quota_dir }}"
      register: quota_quotaon
      when: not quota_enabled
      failed_when: ( "Cannot find filesystem to check or filesystem not mounted with quota option" in quota_quotaon.stdout )

    - name: "Read the grace times for {{ quota_dir }}"
      ansible.builtin.command: "repquota {{ quota_dir }}"
      register: quota_repquota
      changed_when: false

    - name: "Set facts for the grace times for {{ quota_dir }}"
      ansible.builtin.set_fact:
        # quota_existing_grace_block: "{{ (line.split(' ')[3] | regex_replace(';$') | to_datetime('%H:%M')).seconds }}"
        # quota_existing_grace_inode: "{{ (line.split(' ')[7] | regex_replace(';$') | to_datetime('%H:%M')).seconds }}"
        quota_existing_grace_block_raw: "{{ line.split(' ')[3] | regex_replace(';$') }}"
        quota_existing_grace_inode_raw: "{{ line.split(' ')[7] | regex_replace(';$') }}"
      when: line is regex('^Block grace time')
      loop: "{{ quota_repquota.stdout_lines }}"
      loop_control:
        loop_var: line
        extended: true
        label: "line {{ ansible_loop.index }}"

    - name: "Convert the grace times for {{ quota_dir }} into seconds"
      ansible.builtin.set_fact:
        quota_existing_grace_block: "{{ (quota_existing_grace_block_raw.line.split(':')[0] | int * 3600) + (quota_existing_grace_block_raw.line.split(':')[1] | int * 60) }}"
        quota_existing_grace_inode: "{{ (quota_existing_grace_inode_raw.line.split(':')[0] | int * 3600) + (quota_existing_grace_inode_raw.line.split(':')[1] | int * 60) }}"

    - name: "Existing block grace time in seconds for {{ quota_dir }}"
      debug:
        var: quota_existing_grace_block
        verbosity: 2

    - name: "Existing inode grace time in seconds for {{ quota_dir }}"
      debug:
        var: quota_existing_grace_inode
        verbosity: 2

    - name: "Set the gracetimes for {{ quota_dir | default('/home') }}"
      ansible.builtin.shell: "setquota -t {{ quota_grace_block | default('86400') }} {{ quota_grace_inode | default('86400') }} {{ quota_dir | default('/home') }} ; repquota {{ quota_dir | default('/home') }} | grep '^Block'"
      register: quota_grace_times_after
      changed_when: quota_grace_times_before.stdout != quota_grace_times_after.stdout

    - name: Quota warning config in place
      ansible.builtin.template:
        src: warnquota.conf.j2
        dest: /etc/warnquota.conf

    - name: Quota warning defaults in place
      ansible.builtin.template:
        src: quota.j2
        dest: /etc/default/quota

    - name: Warn that a reboot might be needed
      ansible.builtin.debug:
        msg: "You might need to reboot this server before the disk quotas are applied"
      when: quota_installed.changed

  tags:
    - quota
...
